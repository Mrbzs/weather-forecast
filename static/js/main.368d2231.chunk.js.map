{"version":3,"sources":["components/Main/Main.module.css","constants/index.js","context/city-context.js","components/CitySelect/CitySelect.js","components/CityTree/CityTree.js","components/Main/Main.js","actions/index.js","App.js","index.js","components/CityTree/CityTree.module.css","App.module.css","components/CitySelect/CitySelect.module.css"],"names":["module","exports","OPTIONS","CITIES","name","lat","lon","CityContext","createContext","CityProvider","children","useState","city","setCity","Provider","value","useCityValue","useContext","CitySelect","className","styles","onChange","cityName","selectedCity","find","centered","map","TabPane","key","tab","CityTree","memo","cityData","treeData","option","title","charAt","toUpperCase","slice","forEach","index","data","index2","date","Date","setTime","dt","push","toLocaleDateString","toLocaleString","temp","day","toFixed","humidity","src","weather","icon","alt","description","leaf","defaultExpandedKeys","Main","setCityData","loading","setLoading","useEffect","axios","get","getCityData","then","res","catch","Error","tip","App","Header","theme","Content","render","document","getElementById"],"mappings":"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","file":"static/js/main.368d2231.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinContainer\":\"Main_spinContainer__3UVvM\"};","export const BASE_URL = 'https://api.openweathermap.org/data/2.5/onecall';\r\nexport const API_KEY = '5ef67bc28bee070fb605bb14993c4c75';\r\nexport const OPTIONS = ['current', 'hourly', 'daily'];\r\nexport const CITIES = [\r\n  {\r\n    name: 'Nicosia',\r\n    lat: 33.37,\r\n    lon: 35.17\r\n  },\r\n  {\r\n    name: 'Larnaca',\r\n    lat: 33.63,\r\n    lon: 34.92\r\n  },\r\n  {\r\n    name: 'Limassol',\r\n    lat: 33.07,\r\n    lon: 34.67\r\n  },\r\n  {\r\n    name: 'Dubai',\r\n    lat: 55.3,\r\n    lon: 25.26\r\n  },\r\n  {\r\n    name: 'Tbilisi',\r\n    lat: 44.83,\r\n    lon: 41.69\r\n  }\r\n];\r\n","import React, { useState, useContext, createContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { CITIES } from '../constants';\r\n\r\nexport const CityContext = createContext();\r\nexport const CityProvider = ({ children }) => {\r\n  const [city, setCity] = useState(CITIES[0]);\r\n\r\n  return (\r\n    <CityContext.Provider value={{ city, setCity }}>\r\n      {children}\r\n    </CityContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useCityValue = () => useContext(CityContext);\r\n\r\nCityProvider.propTypes = {\r\n  children: PropTypes.any\r\n};\r\n","import React from 'react';\r\nimport { Tabs } from 'antd';\r\nimport { useCityValue } from '../../context';\r\nimport { CITIES } from '../../constants';\r\nimport * as styles from './CitySelect.module.css';\r\n\r\nexport const CitySelect = () => {\r\n  const { city, setCity } = useCityValue();\r\n\r\n  const onChangedCity = (cityName) => {\r\n    const selectedCity = CITIES.find((city) => city.name === cityName);\r\n    setCity(selectedCity);\r\n  };\r\n\r\n  return (\r\n    <Tabs\r\n      className={styles.tabs}\r\n      value={city.name}\r\n      onChange={onChangedCity}\r\n      centered\r\n    >\r\n      {CITIES.map(({ name }) => (\r\n        <Tabs.TabPane key={name} tab={name}></Tabs.TabPane>\r\n      ))}\r\n    </Tabs>\r\n  );\r\n};\r\n","import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Tree } from 'antd';\r\nimport { OPTIONS } from '../../constants';\r\nimport { FaThermometerHalf, FaTint } from 'react-icons/fa';\r\nimport * as styles from './CityTree.module.css';\r\n\r\nexport const CityTree = memo(({ cityData }) => {\r\n  const treeData = OPTIONS.map((option) => ({\r\n    title: option.charAt(0).toUpperCase() + option.slice(1),\r\n    key: option,\r\n    children: []\r\n  }));\r\n\r\n  OPTIONS.forEach((option, index) => {\r\n    const dataArray =\r\n      option === 'current' ? [cityData[option]] : cityData[option];\r\n\r\n    dataArray.forEach((data, index2) => {\r\n      const date = new Date();\r\n      date.setTime(data.dt * 1000);\r\n\r\n      treeData[index].children.push({\r\n        title: `${\r\n          option === 'daily' ? date.toLocaleDateString() : date.toLocaleString()\r\n        }`,\r\n        key: `date${index}-${index2}`,\r\n        children: []\r\n      });\r\n\r\n      const leafData = [\r\n        {\r\n          title: (\r\n            <>\r\n              <FaThermometerHalf className={styles.weatherIcon} />\r\n              {((data.temp.day || data.temp) - 273.15).toFixed(2)}Â°C\r\n            </>\r\n          ),\r\n          key: `temp${index}-${index2}`\r\n        },\r\n        {\r\n          title: (\r\n            <>\r\n              <FaTint className={styles.weatherIcon} />\r\n              {data.humidity}%\r\n            </>\r\n          ),\r\n          key: `humid${index}-${index2}`\r\n        },\r\n        {\r\n          title: (\r\n            <>\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n                alt=\"Icon\"\r\n              />\r\n              {data.weather[0].description.charAt(0).toUpperCase() +\r\n                data.weather[0].description.slice(1)}\r\n            </>\r\n          ),\r\n          key: `weather${index}-${index2}`\r\n        }\r\n      ];\r\n\r\n      leafData.forEach((leaf) =>\r\n        treeData[index].children[index2].children.push(leaf)\r\n      );\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Tree\r\n      className={styles.tree}\r\n      treeData={treeData}\r\n      defaultExpandedKeys={['date0-0']}\r\n    />\r\n  );\r\n});\r\n\r\nCityTree.propTypes = {\r\n  cityData: PropTypes.object\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CityTree } from '../CityTree/CityTree';\r\nimport { getCityData } from '../../actions';\r\nimport { useCityValue } from '../../context';\r\nimport { Spin } from 'antd';\r\nimport * as styles from './Main.module.css';\r\n\r\nexport const Main = () => {\r\n  const [cityData, setCityData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const { city } = useCityValue();\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    getCityData(city)\r\n      .then((res) => {\r\n        setLoading(false);\r\n        setCityData(res.data);\r\n      })\r\n      .catch(() => {\r\n        setLoading(false);\r\n        throw new Error('Something went wrong');\r\n      });\r\n  }, [city]);\r\n\r\n  return loading || !cityData ? (\r\n    <div className={styles.spinContainer}>\r\n      <Spin tip=\"Loading...\" />\r\n    </div>\r\n  ) : (\r\n    <CityTree cityData={cityData} />\r\n  );\r\n};\r\n","import axios from 'axios';\r\nimport { BASE_URL, API_KEY } from '../constants';\r\n\r\nexport const getCityData = (city) => {\r\n  return axios.get(\r\n    `${BASE_URL}?lat=${city.lat}&lon=${city.lon}&exclude=minutely&appid=${API_KEY}`\r\n  );\r\n};\r\n","import React from 'react';\nimport { Layout } from 'antd';\nimport 'antd/dist/antd.css';\nimport { CitySelect } from './components/CitySelect/CitySelect';\nimport { Main } from './components/Main/Main';\nimport { CityProvider } from './context';\nimport * as styles from './App.module.css';\n\nexport const App = () => {\n  return (\n    <CityProvider>\n      <Layout className={styles.layout}>\n        <Layout.Header className={styles.header} theme=\"light\">\n          <CitySelect />\n        </Layout.Header>\n        <Layout.Content className={styles.content}>\n          <Main />\n        </Layout.Content>\n      </Layout>\n    </CityProvider>\n  );\n};\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nrender(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherIcon\":\"CityTree_weatherIcon__28Sed\",\"tree\":\"CityTree_tree__3lm8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"App_header__30XdZ\",\"content\":\"App_content__2236V\",\"layout\":\"App_layout__3Qt8u\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"CitySelect_tabs__e0bId\"};"],"sourceRoot":""}