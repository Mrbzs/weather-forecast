{"version":3,"sources":["constants/index.js","components/CityTree/CityTree.js","components/CitySelect/CitySelect.js","components/Main/Main.js","actions/index.js","App.js","index.js","components/Main/Main.module.css","components/CityTree/CityTree.module.css","components/CitySelect/CitySelect.module.css"],"names":["OPTIONS","CITIES","name","lat","lon","CityTree","memo","cityData","treeData","map","option","title","charAt","toUpperCase","slice","key","children","forEach","index","data","index2","date","Date","setTime","dt","push","toLocaleDateString","toLocaleString","className","styles","temp","day","toFixed","humidity","src","weather","icon","alt","description","leaf","defaultExpandedKeys","data-testid","CitySelect","city","onChangedCity","value","onChange","cityName","centered","TabPane","tab","aria-label","Main","useState","setCityData","loading","setLoading","setCity","useEffect","axios","get","getCityData","then","res","content","tip","Header","selectedCity","find","Content","App","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.5c0ea2a3.chunk.js","sourcesContent":["export const BASE_URL = 'https://api.openweathermap.org/data/2.5/onecall';\r\nexport const API_KEY = '5ef67bc28bee070fb605bb14993c4c75';\r\nexport const OPTIONS = ['current', 'hourly', 'daily'];\r\nexport const CITIES = [\r\n  {\r\n    name: 'Nicosia',\r\n    lat: 33.37,\r\n    lon: 35.17\r\n  },\r\n  {\r\n    name: 'Larnaca',\r\n    lat: 33.63,\r\n    lon: 34.92\r\n  },\r\n  {\r\n    name: 'Limassol',\r\n    lat: 33.07,\r\n    lon: 34.67\r\n  },\r\n  {\r\n    name: 'Dubai',\r\n    lat: 25.26,\r\n    lon: 55.3\r\n  },\r\n  {\r\n    name: 'Tbilisi',\r\n    lat: 44.83,\r\n    lon: 41.69\r\n  }\r\n];\r\n","import React, { memo } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Tree } from 'antd';\r\nimport { OPTIONS } from '../../constants';\r\nimport { FaThermometerHalf, FaTint } from 'react-icons/fa';\r\nimport * as styles from './CityTree.module.css';\r\n\r\nexport const CityTree = memo(({ cityData }) => {\r\n  const treeData = OPTIONS.map((option) => ({\r\n    title: option.charAt(0).toUpperCase() + option.slice(1),\r\n    key: option,\r\n    children: []\r\n  }));\r\n\r\n  OPTIONS.forEach((option, index) => {\r\n    const dataArray =\r\n      option === 'current' ? [cityData[option]] : cityData[option];\r\n\r\n    dataArray.forEach((data, index2) => {\r\n      const date = new Date();\r\n      date.setTime(data.dt * 1000);\r\n\r\n      treeData[index].children.push({\r\n        title: `${\r\n          option === 'daily' ? date.toLocaleDateString() : date.toLocaleString()\r\n        }`,\r\n        key: `date${index}-${index2}`,\r\n        children: []\r\n      });\r\n\r\n      const leafData = [\r\n        {\r\n          title: (\r\n            <>\r\n              <FaThermometerHalf className={styles.weatherIcon} />\r\n              {((data.temp.day || data.temp) - 273.15).toFixed(2)}Â°C\r\n            </>\r\n          ),\r\n          key: `temp${index}-${index2}`\r\n        },\r\n        {\r\n          title: (\r\n            <>\r\n              <FaTint className={styles.weatherIcon} />\r\n              {data.humidity}%\r\n            </>\r\n          ),\r\n          key: `humid${index}-${index2}`\r\n        },\r\n        {\r\n          title: (\r\n            <>\r\n              <img\r\n                src={`https://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`}\r\n                alt=\"Icon\"\r\n              />\r\n              {data.weather[0].description.charAt(0).toUpperCase() +\r\n                data.weather[0].description.slice(1)}\r\n            </>\r\n          ),\r\n          key: `weather${index}-${index2}`\r\n        }\r\n      ];\r\n\r\n      leafData.forEach((leaf) =>\r\n        treeData[index].children[index2].children.push(leaf)\r\n      );\r\n    });\r\n  });\r\n\r\n  return (\r\n    <Tree\r\n      className={styles.tree}\r\n      treeData={treeData}\r\n      defaultExpandedKeys={['date0-0']}\r\n      data-testid=\"city-tree\"\r\n    />\r\n  );\r\n});\r\n\r\nCityTree.propTypes = {\r\n  cityData: PropTypes.object.isRequired\r\n};\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Tabs } from 'antd';\r\nimport { CITIES } from '../../constants';\r\nimport * as styles from './CitySelect.module.css';\r\n\r\nexport const CitySelect = ({ city, onChangedCity }) => {\r\n  return (\r\n    <div data-testid=\"city-select\">\r\n      <Tabs\r\n        className={styles.tabs}\r\n        value={city.name}\r\n        onChange={(cityName) => onChangedCity(cityName)}\r\n        centered\r\n      >\r\n        {CITIES.map(({ name }) => (\r\n          <Tabs.TabPane key={name} tab={name} aria-label=\"lol\"></Tabs.TabPane>\r\n        ))}\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nCitySelect.propTypes = {\r\n  city: PropTypes.object.isRequired,\r\n  onChangedCity: PropTypes.func.isRequired\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Layout, Spin } from 'antd';\r\nimport { CityTree } from '../CityTree/CityTree';\r\nimport { CitySelect } from '../CitySelect/CitySelect';\r\nimport { getCityData } from '../../actions';\r\nimport { CITIES } from '../../constants';\r\nimport * as styles from './Main.module.css';\r\n\r\nexport const Main = () => {\r\n  const [cityData, setCityData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [city, setCity] = useState(CITIES[0]);\r\n\r\n  const onChangedCity = (cityName) => {\r\n    const selectedCity = CITIES.find((city) => city.name === cityName);\r\n    setCity(selectedCity);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    getCityData(city).then((res) => {\r\n      setLoading(false);\r\n      setCityData(res.data);\r\n    });\r\n  }, [city]);\r\n\r\n  const content =\r\n    loading || !cityData ? (\r\n      <div className={styles.spinContainer}>\r\n        <Spin tip=\"Loading...\" />\r\n      </div>\r\n    ) : (\r\n      <CityTree cityData={cityData} />\r\n    );\r\n\r\n  return (\r\n    <Layout className={styles.layout} data-testid=\"main\">\r\n      <Layout.Header className={styles.header}>\r\n        <CitySelect city={city} onChangedCity={onChangedCity} />\r\n      </Layout.Header>\r\n      <Layout.Content className={styles.content}>{content}</Layout.Content>\r\n    </Layout>\r\n  );\r\n};\r\n","import axios from 'axios';\r\nimport { BASE_URL, API_KEY } from '../constants';\r\n\r\nexport const getCityData = (city) => {\r\n  return axios.get(\r\n    `${BASE_URL}?lat=${city.lat}&lon=${city.lon}&exclude=minutely&appid=${API_KEY}`\r\n  );\r\n};\r\n","import React from 'react';\nimport 'antd/dist/antd.css';\nimport { Main } from './components/Main/Main';\n\nexport const App = () => {\n  return (\n    <span data-testid=\"application\">\n      <Main />\n    </span>\n  );\n};\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { App } from './App';\nimport './index.css';\n\nrender(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spinContainer\":\"Main_spinContainer__3UVvM\",\"header\":\"Main_header__1TqOY\",\"content\":\"Main_content__3E8hC\",\"layout\":\"Main_layout__1R1Ge\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"weatherIcon\":\"CityTree_weatherIcon__28Sed\",\"tree\":\"CityTree_tree__3lm8C\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tabs\":\"CitySelect_tabs__e0bId\"};"],"sourceRoot":""}